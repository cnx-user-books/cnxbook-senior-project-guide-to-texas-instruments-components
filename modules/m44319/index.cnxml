<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Overview of the MSP430™ Microcontroller from Texas instruments</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m44319</md:content-id>
  <md:title>Overview of the MSP430™ Microcontroller from Texas instruments</md:title>
  <md:abstract>This module gives a brief overview of the MSP430™ microcontroller, how to read a data sheet for an MSP430™ microcontroller, and how to pick the right one for some sample applications.
This module is one of many in a textbook designed to help seniors select TI products for use in their senior project.</md:abstract>
  <md:uuid>84f35a80-b08e-4223-bdce-212f6d22f386</md:uuid>
</metadata>

<content>
    <para id="import-auto-id1164535887557"><emphasis effect="bold">MSP430™ microcontrollers</emphasis>
    </para><para id="import-auto-id1164536240256">MSP430™ microcontrollers (MCUs) from Texas Instruments are 16-bit, RISC-based, mixed-signal processors designed specifically for ultra-low power. MSP430 MCUs have the right mix of analog and digital integrated intelligent peripherals, ease of use, low cost and lowest power consumption for thousands of applications ranging from simple sensor designs to complex electricity meters.</para><para id="import-auto-id1164544696652">To get a better idea of what the MSP430 MCU is and how you can use it to solve a system design need or application problem, let’s take a look at a typical block diagram for a device. Figure 1 is the device block diagram for the MSP430G2553, one of the MSP430 Value Line devices.</para><figure id="import-auto-id1164537236949">
      <media id="import-auto-id1164553948266" alt="">
        <image mime-type="image/png" src="../../media/graphics1-5686.png" height="452" width="641"/>
      </media>
    </figure>
    <para id="import-auto-id1164560712914">The purpose of the block diagram is to provide a high-level reference of the integration and feature set found in a given device. You can find the block diagram for any MSP430 MCU in the data sheets at <link url="http://www.msp430.com/"><emphasis effect="underline">www.msp430.com</emphasis>.</link></para><para id="import-auto-id1164539058535">The block diagram contains key features of the device that can help you quickly identify if an MSP430 MCU is a fit for a given application need. There are a few features you will need to consider:</para><list id="import-auto-id2114165" list-type="bulleted"><item>Integrated memory:<list id="import-auto-id1164533216809" list-type="bulleted"><item>Includes both volatile (RAM) and nonvolatile (flash) sizes.</item><item>When multiple values are listed, it shows which device memory size variants are available with the same peripherals.</item></list></item>
      <item>General-purpose I/O pins:<list id="import-auto-id1164537283252" list-type="bulleted"><item>The MSP430G2553 has up to 24 I/Os available: eight Port1 (P1), eight P2 and eight P3 I/Os.<list id="import-auto-id1164536435727" list-type="bulleted"><item>Package-dependent: Check the pinout for the total number.</item></list></item><item>All pins have configurable integrated pullup or pulldown resistors.</item><item>P1 and P2 I/Os when inputs can provide an interrupt to the CPU.</item></list></item>
      <item>CPU and emulation capabilities:<list id="import-auto-id1164539164992" list-type="bulleted"><item>16 MHz is the maximum CPU clock speed for the MSP430G2553.</item><item>Integrated emulation for the MSP430G2553 has two hardware breakpoints (2BP) for use when debugging.</item></list></item>
      <item>Simplified clock system:<list id="import-auto-id1164533925886" list-type="bulleted"><item>One external clock source on XIN/XOUT can be sourced.</item><item>The internal clock tree provides three clock tree branches.</item></list></item>
      <item>Digital and analog peripheral mix. The MSP430G2553 device includes:<list id="import-auto-id1164538024034" list-type="bulleted"><item>10-bit, eight-channel analog-to-digital converter (ADC) with internal voltage reference for voltage measurement (sensors, power rails, etc).</item><item>Comp_A+: eight-channel analog comparator with internal voltage reference for simple measurements or voltage threshold detection.</item><item>WDT+: watchdog timer for resetting the CPU in case of timeout (can also be used as a simple interval timer generating an interrupt).</item><item>Timer0,1_A3: two 16-bit general-purpose timers, each with three capture-compare (CC) I/Os.</item><item>USCI (A0/B0): universal serial communication interface module capable of providing standard UART, SPI and I2C communication protocols used to interface with external digital devices (sensors, data converters, radio ICs).</item></list></item>
    </list><para id="import-auto-id1164554918220">Figure 2 is the corresponding pinout also found in each device data sheet for the MSP430G2553. Here you can see exactly how peripheral functions are mapped onto the multiplexed I/Os of the device. Each I/O pin can be configured in software to provide the desired pin function for a given I/O based on its internal connectivity.</para><figure id="import-auto-id1164552894753">
      <media id="import-auto-id1164538788403" alt="">
        <image mime-type="image/png" src="../../media/graphics2-ddca.png" height="158" width="592"/>
      </media>
    </figure>
    <para id="import-auto-id1164537360854">Figure 2 also shows the necessary power-supply connections (DVCC, DVSS), programmer/debugging tool connections (SBWTCK, SBWTDIO), and general I/O and peripheral connections (P3.1, TA1.0, CA2, UCB0SDA). When beginning any design with the MSP430 MCU, reviewing the given device’s block diagram and package pinout can provide a great guide to what is possible, as well as any constraints (such as memory size or pinout limitations).</para><para id="import-auto-id1164536254030">Connecting the MSP430 MCU in any system is, in most cases, very straightforward. The first consideration should be the power-supply requirements. Most MSP430 devices operate at 1.8 V to 3.6 V, so a typical 3-V supply will work great. Connecting the JTAG to support device memory programming and debugging is also important. For MSP430G2xxx devices, there are two possibilities: standard four-wire JTAG or MSP430 MCU-specific Spy-Bi-Wire (SBW, or two-wire JTAG). Both interfaces are acceptable for programming and debugging application code. The main advantage of the four-wire mode is speed. The main advantage of the two-wire SBW mode is reduced pin-connection requirements.</para><para id="import-auto-id1164546478999">Figure 3 is an example schematic thatshows the baseline connections for the MSP430G2553, as well as some examples of other connections that can be made to the I/Os and integrated peripherals.</para><figure id="import-auto-id1164567346277">
      <media id="import-auto-id1164534014119" alt="">
        <image mime-type="image/png" src="../../media/graphics3-eee7.png" height="287" width="577"/>
      </media>
    </figure>
    <para id="import-auto-id1164559189303">Figure 3 shows the connections of the MSP430G2553 in a typical sensor interface application. In this example, the MSP430G2553's integrated ADC10 is used to measure an analog signal via a thermistor that changes resistance as temperature increases or decreases, and also interfaces using an I2C bus from the USCI module to an external humidity sensor. In addition, a 32.768-kHz watch crystal keeps accurate timing; two switches, along with one PWM-controlled LED, provide a simple user interface. To save power from the 3-V coin cell battery, when not in use the humidity sensor and thermistor ladder can be powered off using a general-purpose I/O (P2.5) and the internal voltage reference (VREF+), respectively.</para><para id="import-auto-id1164538255535">Now that we've covered the basics and how to understand the capabilities of a given MSP430 device, let’s look more closely at the documentation and how to use it most effectively. MSP430 device documentation can be broken up into three main categories:</para><list id="import-auto-id1164539687819" list-type="bulleted" bullet-style="bullet"><item>Device-specific data sheet (e.g., <link url="http://www.ti.com/lit/pdf/slas735f"><emphasis effect="underline">MSP430G2553 data sheet</emphasis>.</link>) Here, you will find anything device-specific: pinouts, block diagrams, absolute operating conditions (supply voltage and operating temperature ranges), electrical parameters and performance tolerances (power consumption, ADC accuracy, and internal clock minimum and maximum frequencies).</item>
    </list><list id="import-auto-id1164553533659" list-type="bulleted" bullet-style="bullet"><item>Device family user’s guide (e.g., <link url="http://www.ti.com/lit/pdf/slau144"><emphasis effect="underline">MSP430x2xx family user's guide</emphasis>)</link>. This document contains information applicable to all devices in a family: peripheral detailed descriptions, register and bit function definitions, CPU and instruction set, power mode definitions and settings. Some peripherals included in the user’s guide will not be present in a given device, as it is intended to cover all peripherals within a given family.</item>
    </list><list id="import-auto-id1164534744861" list-type="bulleted" bullet-style="bullet"><item>Device-specific errata sheet (e.g., <link url="http://www.ti.com/lit/pdf/slaz075"><emphasis effect="underline">MSP430G2553 device errata sheet</emphasis>)</link>. The errata sheet is a critical document that lists any device bugs that can affect a given use-case along with potential workarounds. Errata can vary by device as well as device revisions.</item>
    </list><para id="import-auto-id1164539353180">You can find these documents, as well as additional reference material such as application notes, example code and development tool documentation, by navigating to the device-specific product folder (e.g., <link url="http://www.ti.com/product/msp430g2553"><emphasis effect="underline">MSP430G2553 product folder</emphasis>)</link>. Here, you can find the latest information as well as links to all pertinent documentation and software to aid your design efforts.</para><para id="import-auto-id1164536237920">Arguably, the most valuable document is the device-specific data sheet. We have already looked at two core aspects (pinout and block diagram), but let’s dive a bit deeper into the information provided. The front page of the data sheet is designed to highlight all of the key aspects of the device organized into bulleted lists (Figure 4). It is comprehensive, showing typical power consumption, clock system capabilities, peripheral mix and package options. </para><figure id="import-auto-id1164533831975">
      <media id="import-auto-id1164538932313" alt="">
        <image mime-type="image/png" src="../../media/graphics4-5652.png" height="464" width="612"/>
      </media>
    </figure>
    <para id="import-auto-id1164536227061">This information is a great start, but is targeted as more of a marketing message than a reference. Going beyond the first page is critical to fully assess the given device’s capabilities and its limitations. Looking beyond the first page begins to yield the information needed to really design a system with the MSP430 MCU. This begins with the available options for the device and variants. For example, there are 40 device and orderable part number variants for the MSP430G2553 device. These variants provide different mixes of flash or RAM, peripherals available, number of I/Os supported, and package options such as DIP or surface-mount options.</para><para id="import-auto-id1164543697447">While all information in a data sheet should be considered important, we recommend focusing on these areas when reviewing a data sheet for a specific MSP430 MCU:</para><list id="import-auto-id1164538902751" list-type="bulleted"><item>Supported interrupt sources, corresponding flags and priority (Figure 5).</item>
    </list><figure id="import-auto-id1164538731724">
      <media id="import-auto-id1164544710550" alt="">
        <image mime-type="image/png" src="../../media/graphics5-c10e.png" height="176" width="645"/>
      </media>
    </figure>
    <list id="import-auto-id1164553320161" list-type="bulleted"><item>Calibration data such as internal clock defaults and ADC offset/gain settings (Figure 6).</item>
    </list><figure id="import-auto-id1164534723818">
      <media id="import-auto-id1164536339879" alt="">
        <image mime-type="image/png" src="../../media/graphics6-4aab.png" height="183" width="621"/>
      </media>
    </figure>
    <list id="import-auto-id1164545302131" list-type="bulleted"><item>Timer functions and pinouts for each capture-compare I/O (Figure 7).</item>
    </list><figure id="import-auto-id1164538019910">
      <media id="import-auto-id1164533561397" alt="">
        <image mime-type="image/png" src="../../media/graphics7-27cc.png" height="200" width="625"/>
      </media>
    </figure>
    <list id="import-auto-id1164552984835" list-type="bulleted"><item>Absolute maximum ratings and recommended operating conditions, including voltage and temperature, as well as CPU clock speeds vs. Vcc (Figure 8).</item>
    </list><figure id="import-auto-id1164545923558">
      <media id="import-auto-id1164538240830" alt="">
        <image mime-type="image/png" src="../../media/graphics8-2909.png" height="272" width="652"/>
      </media>
    </figure>
    <list id="import-auto-id1164537958512" list-type="bulleted"><item>Performance specifications for power consumption, analog accuracy, clock tolerances, etc. (Current consumption and ADC performance excerpts shown in Figure 9).</item>
    </list><figure id="import-auto-id1164534740199">
      <media id="import-auto-id1164552429823" alt="">
        <image mime-type="image/png" src="../../media/graphics9-dd56.png" height="311" width="472"/>
      </media>
    </figure>
    <list id="import-auto-id1164545537276" list-type="bulleted"><item>Port schematics and pin function tables that detail exactly how to select a given multiplexed function on a given pin using the I/O control registers (Figure 10).</item>
    </list><figure id="import-auto-id1164542954289">
      <media id="import-auto-id1164537615048" alt="">
        <image mime-type="image/png" src="../../media/graphics10-b12c.png" height="180" width="639"/>
      </media>
    </figure>
    <list id="import-auto-id1164537304769" list-type="bulleted"><item>Package information providing package tolerances, useful when creating device footprints in schematic/PCB CAD tools (Figure 11).</item>
    </list><figure id="import-auto-id5224795">
      <media id="import-auto-id1164562148052" alt="">
        <image mime-type="image/png" src="../../media/graphics11-cf33.png" height="454" width="494"/>
      </media>
    </figure>
    <para id="import-auto-id1164534555713">Now that we have reviewed the MSP430 device documentation and where to find information about what a device can do, let’s walk through the process of actually selecting the part that best suits a given design need.</para><para id="import-auto-id1164553971403">Let’s start by answering the questions below:</para>
    <list id="import-auto-id1164532962780" list-type="labeled-item"><item>1. “What problem am I trying to solve?” This is fundamental. Until you understand this, nothing else can happen. Knowing what problem you face at a system level allows you to identify how the MCU's features can help you solve that problem most efficiently.</item>
    </list><list id="import-auto-id1164545085494" list-type="bulleted" bullet-style="bullet"><item>Do analog signals need to be measured, such as a voltage from a strain gauge or an output from a potentiometer? If so, perhaps an integrated ADC is of value. If a simple analog threshold is all you need, an integrated comparator will likely do the trick.</item>
      <item>What is the user interface? Switches likely translate into simple digital interrupt inputs, while displays may require a communication bus such as SPI in order to refresh the data displayed. </item>
      <item>Are time-sensitive signals needed off-chip? Perhaps you need a PWM signal to control a motor’s speed or LED brightness.</item>
      <item>What are the other devices or circuits that the MCU needs to interface with? Identifying potential analog inputs, logic-level digital I/O signals, or communication interfaces such as I2C or UART will all help you find the right MCU to fit the application need.</item>
    </list><list id="import-auto-id1164535829296" list-type="labeled-item"><item>2. “How many 'things' need to be input into the device or driven from the device [as outputs])?” Determining this at a block level for the system, and then at a more detailed MCU pinout level, will clarify exactly how many I/O pins you will need.</item>
    </list><list id="import-auto-id1164550996686" list-type="labeled-item"><item>3. “What are my power-supply requirements/limitations?” This is important, as the MCU supply may impact the overall system design. For example, if powered from a 9-V battery, the MSP430 MCU will need a regulator to bring its supply to within the 1.8- to 3.6-V range.</item>
    </list><list id="import-auto-id6466290" list-type="labeled-item"><item>4. “How much memory will my application need?” This is not always obvious, as the software may not yet be written. But if you plan on using existing code, or modifying code already written, you can get an idea of what a given function in software might require in terms of program and data-memory needs. And when you need certain algorithms such as fast Fourier transform or filtering, you can often estimate RAM requirements before ever selecting the device by simulating the functions on a PC.</item>
    </list><list id="import-auto-id1164558905371" list-type="labeled-item"><item>5. “Are any ‘special’ features needed?” For example, do you need a USB interface to a PC? Or a high-resolution ADC (&gt;12 bits) to get a certain system performance? Consider looking for MCUs that offer such features integrated to minimize the system-level design effort and complexity required.</item>
    </list><list id="import-auto-id1164546387025" list-type="labeled-item"><item>6. “Are there any physical design or assembly constraints (package size, pin spacing, PCB or assembly capability)?” Often, the box the final system must fit into is a factor. This can have big implications on package requirements, pin-count limits and PCB design complexity/cost. Also consider testing a final system – the more dense a design or package is with respect to PCB routing, the more challenging it is to assemble and debug. DIPs are easiest, with BGAs being quite challenging.</item>
    </list><para id="import-auto-id1164542658385">Numerous devices available in the MSP430 family portfolio can meet the given system requirements uncovered in these questions. We've listed a few in Table 1, with their own unique feature sets. A key driver in listing these specific parts is their ease of use. They are available in DIP packages and are supported by a flexible and scalable development tool that can accelerate prototyping of a given application.</para><para id="eip-405"><media id="import-auto-id116607111" alt="">
		<image mime-type="image/png" src="../../media/graphics12-5b4c.png" height="151" width="575"/>
	</media>
</para><para id="eip-334"><emphasis effect="bold">Table 1.</emphasis> Three MSP430 devices with typical characteristics.
</para><para id="import-auto-id1164553415024">Each of the devices can be used with the MSP430 MCU <link url="http://www.ti.com/tool/msp-exp430g2"><emphasis effect="underline">LaunchPad</emphasis></link> to provide an easy, intuitive and out-of-the-box development experience (Figure 12).</para><figure id="import-auto-id1164553702536">
      <media id="import-auto-id1164567142106" alt="">
        <image mime-type="image/png" src="../../media/graphics13.png" height="415" width="613"/>
      </media>
    </figure>
    <para id="import-auto-id1164570514889">Solving any design challenge begins by understanding the problem and any constraints that the system may have. Once you have established a clear picture of the problem you need to solve, finding the ideal way to solve that problem – using an MCU – can be straightforward if you understand the capabilities that MCUs offer. Being able to navigate the MSP430 family, its feature set, and the available devices and development tools are keys to success in meeting such a system design challenge.</para></content>
</document>